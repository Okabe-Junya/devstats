{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      },
      {
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "enable": true,
        "hide": false,
        "iconColor": "rgba(255, 96, 96, 1)",
        "limit": 100,
        "name": "Releases",
        "query": "SELECT title, description from annotations WHERE $timeFilter order by time asc",
        "rawQuery": "select extract(epoch from time) AS time, title as text, description as tags from sannotations where $__timeFilter(time)",
        "showIn": 0,
        "tagsColumn": "title,description",
        "textColumn": "",
        "titleColumn": "[[full_name]] Release",
        "type": "alert"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 35,
  "iteration": 1727589533638,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "P172949F98CB31475"
      },
      "description": "[[full_name]] [[metric]] projects countries stats",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "Value",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "bars",
            "fillOpacity": 100,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 21,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "links": [],
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "lastNotNull",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "right"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "8.5.27",
      "targets": [
        {
          "alias": "",
          "datasource": {
            "type": "postgres",
            "uid": "P172949F98CB31475"
          },
          "dsType": "influxdb",
          "format": "time_series",
          "group": [],
          "groupBy": [],
          "measurement": "notused",
          "metricColumn": "none",
          "orderByTime": "ASC",
          "policy": "default",
          "rawQuery": true,
          "rawSql": "with countries as (\n  select unnest(string_to_array('${countries:csv}', ',')) as country\n)\nselect\n  s.time,\n  [[columns]]\nfrom\n  sprjcntr s,\n  countries c\nwhere\n  $__timeFilter(s.time)\n  and s.period = '[[period]]'\n  and s.series = 'prjcntr' || c.country || '[[metric]]'\ngroup by\n  s.time\norder by\n  s.time",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "[[full_name]] [[metric]] projects countries stats",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P172949F98CB31475"
      },
      "description": "[[full_name]] [[metric]] countries stats",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "Value",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 5,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 21,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 4,
      "links": [],
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "lastNotNull",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "right"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "8.5.27",
      "targets": [
        {
          "alias": "",
          "datasource": {
            "type": "postgres",
            "uid": "P172949F98CB31475"
          },
          "dsType": "influxdb",
          "format": "time_series",
          "group": [],
          "groupBy": [],
          "measurement": "notused",
          "metricColumn": "none",
          "orderByTime": "ASC",
          "policy": "default",
          "rawQuery": true,
          "rawSql": "with countries as (\n  select unnest(string_to_array('${countries:csv}', ',')) as country\n)\nselect\n  s.time,\n  [[columns]]\nfrom\n  sprjcntr s,\n  countries c\nwhere\n  $__timeFilter(s.time)\n  and s.period = '[[period]]'\n  and s.series = 'prjcntr' || c.country || '[[metric]]'\ngroup by\n  s.time\norder by\n  s.time",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "[[full_name]] [[metric]] project countries stats",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P172949F98CB31475"
      },
      "description": "[[full_name]] [[metric]] project countries stats",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "Value",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "bars",
            "fillOpacity": 100,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "percent"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 21,
        "w": 24,
        "x": 0,
        "y": 42
      },
      "id": 3,
      "links": [],
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "lastNotNull",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "right"
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "8.5.27",
      "targets": [
        {
          "alias": "",
          "datasource": {
            "type": "postgres",
            "uid": "P172949F98CB31475"
          },
          "dsType": "influxdb",
          "format": "time_series",
          "group": [],
          "groupBy": [],
          "measurement": "notused",
          "metricColumn": "none",
          "orderByTime": "ASC",
          "policy": "default",
          "rawQuery": true,
          "rawSql": "with countries as (\n  select unnest(string_to_array('${countries:csv}', ',')) as country\n)\nselect\n  s.time,\n  [[columns]]\nfrom\n  sprjcntr s,\n  countries c\nwhere\n  $__timeFilter(s.time)\n  and s.period = '[[period]]'\n  and s.series = 'prjcntr' || c.country || '[[metric]]'\ngroup by\n  s.time\norder by\n  s.time",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": [],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "[[full_name]] [[metric]] project countries stats",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P172949F98CB31475"
      },
      "gridPos": {
        "h": 16,
        "w": 24,
        "x": 0,
        "y": 63
      },
      "id": 1,
      "links": [],
      "options": {
        "content": "${docs:raw}",
        "mode": "html"
      },
      "pluginVersion": "8.5.27",
      "title": "Dashboard documentation",
      "type": "text"
    }
  ],
  "refresh": false,
  "schemaVersion": 36,
  "style": "dark",
  "tags": [
    "dashboard",
    "all"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "All CNCF",
          "value": "All CNCF"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "definition": "",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "full_name",
        "options": [],
        "query": "select value_s from gha_vars where name = 'full_name'",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": true,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": true,
          "text": "Contributors",
          "value": "contributors"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Metric",
        "multi": false,
        "name": "metric",
        "options": [
          {
            "selected": false,
            "text": "Contributions",
            "value": "contributions"
          },
          {
            "selected": true,
            "text": "Contributors",
            "value": "contributors"
          },
          {
            "selected": false,
            "text": "Users",
            "value": "users"
          },
          {
            "selected": false,
            "text": "Activity",
            "value": "events"
          },
          {
            "selected": false,
            "text": "Pushers",
            "value": "committers"
          },
          {
            "selected": false,
            "text": "Pushes",
            "value": "commits"
          },
          {
            "selected": false,
            "text": "Committers",
            "value": "rcommitters"
          },
          {
            "selected": false,
            "text": "Commits",
            "value": "rcommits"
          },
          {
            "selected": false,
            "text": "PR creators",
            "value": "prcreators"
          },
          {
            "selected": false,
            "text": "PRs",
            "value": "prs"
          },
          {
            "selected": false,
            "text": "Issue creators",
            "value": "issuecreators"
          },
          {
            "selected": false,
            "text": "Issues",
            "value": "issues"
          },
          {
            "selected": false,
            "text": "Commenters",
            "value": "commenters"
          },
          {
            "selected": false,
            "text": "Comments",
            "value": "comments"
          },
          {
            "selected": false,
            "text": "Reviewers",
            "value": "reviewers"
          },
          {
            "selected": false,
            "text": "Reviews",
            "value": "reviews"
          },
          {
            "selected": false,
            "text": "Watchers",
            "value": "watchers"
          },
          {
            "selected": false,
            "text": "Watches",
            "value": "watches"
          },
          {
            "selected": false,
            "text": "Forkers",
            "value": "forkers"
          },
          {
            "selected": false,
            "text": "Forks",
            "value": "forks"
          }
        ],
        "query": "contributions,contributors,users,events,committers,commits,rcommitters,rcommits,prcreators,prs,issuecreators,issues,commenters,comments,reviewers,reviews,watchers,watches,forkers,forks",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": true,
          "text": "Year",
          "value": "y"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Period",
        "multi": false,
        "name": "period",
        "options": [
          {
            "selected": false,
            "text": "Month",
            "value": "m"
          },
          {
            "selected": false,
            "text": "Quarter",
            "value": "q"
          },
          {
            "selected": true,
            "text": "Year",
            "value": "y"
          }
        ],
        "query": "Month : m,Quarter : q,Year : y",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": "",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "definition": "select country_name from tcountries order by time asc",
        "hide": 0,
        "includeAll": true,
        "label": "Countries",
        "multi": true,
        "name": "countries",
        "options": [],
        "query": "select country_name from tcountries order by time asc",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "definition": "select repo_group_name from trepo_groups order by time asc",
        "hide": 0,
        "includeAll": true,
        "label": "Projects",
        "multi": true,
        "name": "projects",
        "options": [],
        "query": "select repo_group_name from trepo_groups order by time asc",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "round(hll_cardinality(hll_union_agg(s.\"Kubernetes\"))) as \"Kubernetes\",round(hll_cardinality(hll_union_agg(s.\"Istio\"))) as \"Istio\",round(hll_cardinality(hll_union_agg(s.\"OpenTelemetry\"))) as \"OpenTelemetry\",round(hll_cardinality(hll_union_agg(s.\"Knative\"))) as \"Knative\",round(hll_cardinality(hll_union_agg(s.\"KubeVirt\"))) as \"KubeVirt\",round(hll_cardinality(hll_union_agg(s.\"gRPC\"))) as \"gRPC\",round(hll_cardinality(hll_union_agg(s.\"Envoy\"))) as \"Envoy\",round(hll_cardinality(hll_union_agg(s.\"Helm\"))) as \"Helm\",round(hll_cardinality(hll_union_agg(s.\"Cilium\"))) as \"Cilium\",round(hll_cardinality(hll_union_agg(s.\"Argo\"))) as \"Argo\",round(hll_cardinality(hll_union_agg(s.\"Prometheus\"))) as \"Prometheus\",round(hll_cardinality(hll_union_agg(s.\"TiKV\"))) as \"TiKV\",round(hll_cardinality(hll_union_agg(s.\"Kubeflow\"))) as \"Kubeflow\",round(hll_cardinality(hll_union_agg(s.\"Backstage\"))) as \"Backstage\",round(hll_cardinality(hll_union_agg(s.\"Operator Framework\"))) as \"Operator Framework\",round(hll_cardinality(hll_union_agg(s.\"CNCF\"))) as \"CNCF\",round(hll_cardinality(hll_union_agg(s.\"Keycloak\"))) as \"Keycloak\",round(hll_cardinality(hll_union_agg(s.\"CRI-O\"))) as \"CRI-O\",round(hll_cardinality(hll_union_agg(s.\"Network Service Mesh\"))) as \"Network Service Mesh\",round(hll_cardinality(hll_union_agg(s.\"NATS\"))) as \"NATS\",round(hll_cardinality(hll_union_agg(s.\"containerd\"))) as \"containerd\",round(hll_cardinality(hll_union_agg(s.\"Dapr\"))) as \"Dapr\",round(hll_cardinality(hll_union_agg(s.\"etcd\"))) as \"etcd\",round(hll_cardinality(hll_union_agg(s.\"Linkerd\"))) as \"Linkerd\",round(hll_cardinality(hll_union_agg(s.\"OpenEBS\"))) as \"OpenEBS\",round(hll_cardinality(hll_union_agg(s.\"Harbor\"))) as \"Harbor\",round(hll_cardinality(hll_union_agg(s.\"Fluentd\"))) as \"Fluentd\",round(hll_cardinality(hll_union_agg(s.\"Vitess\"))) as \"Vitess\",round(hll_cardinality(hll_union_agg(s.\"Cloud Deployment Kit for Kubernetes\"))) as \"Cloud Deployment Kit for Kubernetes\",round(hll_cardinality(hll_union_agg(s.\"Falco\"))) as \"Falco\",round(hll_cardinality(hll_union_agg(s.\"Keptn\"))) as \"Keptn\",round(hll_cardinality(hll_union_agg(s.\"Rook\"))) as \"Rook\",round(hll_cardinality(hll_union_agg(s.\"Meshery\"))) as \"Meshery\",round(hll_cardinality(hll_union_agg(s.\"Longhorn\"))) as \"Longhorn\",round(hll_cardinality(hll_union_agg(s.\"Flux\"))) as \"Flux\",round(hll_cardinality(hll_union_agg(s.\"Jaeger\"))) as \"Jaeger\",round(hll_cardinality(hll_union_agg(s.\"Strimzi\"))) as \"Strimzi\",round(hll_cardinality(hll_union_agg(s.\"Submariner\"))) as \"Submariner\",round(hll_cardinality(hll_union_agg(s.\"Antrea\"))) as \"Antrea\",round(hll_cardinality(hll_union_agg(s.\"cert-manager\"))) as \"cert-manager\",round(hll_cardinality(hll_union_agg(s.\"Kyverno\"))) as \"Kyverno\",round(hll_cardinality(hll_union_agg(s.\"Metal³\"))) as \"Metal³\",round(hll_cardinality(hll_union_agg(s.\"Buildpacks\"))) as \"Buildpacks\",round(hll_cardinality(hll_union_agg(s.\"OpenFeature\"))) as \"OpenFeature\",round(hll_cardinality(hll_union_agg(s.\"OPA\"))) as \"OPA\",round(hll_cardinality(hll_union_agg(s.\"Kuma\"))) as \"Kuma\",round(hll_cardinality(hll_union_agg(s.\"Crossplane\"))) as \"Crossplane\",round(hll_cardinality(hll_union_agg(s.\"Konveyor\"))) as \"Konveyor\",round(hll_cardinality(hll_union_agg(s.\"K3s\"))) as \"K3s\",round(hll_cardinality(hll_union_agg(s.\"KubeEdge\"))) as \"KubeEdge\",round(hll_cardinality(hll_union_agg(s.\"Atlantis\"))) as \"Atlantis\",round(hll_cardinality(hll_union_agg(s.\"Thanos\"))) as \"Thanos\",round(hll_cardinality(hll_union_agg(s.\"Dragonfly\"))) as \"Dragonfly\",round(hll_cardinality(hll_union_agg(s.\"Karmada\"))) as \"Karmada\",round(hll_cardinality(hll_union_agg(s.\"KEDA\"))) as \"KEDA\",round(hll_cardinality(hll_union_agg(s.\"CoreDNS\"))) as \"CoreDNS\",round(hll_cardinality(hll_union_agg(s.\"LitmusChaos\"))) as \"LitmusChaos\",round(hll_cardinality(hll_union_agg(s.\"Pravega\"))) as \"Pravega\",round(hll_cardinality(hll_union_agg(s.\"GraphQL\"))) as \"GraphQL\",round(hll_cardinality(hll_union_agg(s.\"Flatcar\"))) as \"Flatcar\",round(hll_cardinality(hll_union_agg(s.\"KubeVela\"))) as \"KubeVela\",round(hll_cardinality(hll_union_agg(s.\"Chaos Mesh\"))) as \"Chaos Mesh\",round(hll_cardinality(hll_union_agg(s.\"Cortex\"))) as \"Cortex\",round(hll_cardinality(hll_union_agg(s.\"Kairos\"))) as \"Kairos\",round(hll_cardinality(hll_union_agg(s.\"Contour\"))) as \"Contour\",round(hll_cardinality(hll_union_agg(s.\"wasmCloud\"))) as \"wasmCloud\",round(hll_cardinality(hll_union_agg(s.\"kubewarden\"))) as \"kubewarden\",round(hll_cardinality(hll_union_agg(s.\"PipeCD\"))) as \"PipeCD\",round(hll_cardinality(hll_union_agg(s.\"kpt\"))) as \"kpt\",round(hll_cardinality(hll_union_agg(s.\"OpenFGA\"))) as \"OpenFGA\",round(hll_cardinality(hll_union_agg(s.\"Open Cluster Management\"))) as \"Open Cluster Management\",round(hll_cardinality(hll_union_agg(s.\"kcp\"))) as \"kcp\",round(hll_cardinality(hll_union_agg(s.\"Carvel\"))) as \"Carvel\",round(hll_cardinality(hll_union_agg(s.\"werf\"))) as \"werf\",round(hll_cardinality(hll_union_agg(s.\"SPIRE\"))) as \"SPIRE\",round(hll_cardinality(hll_union_agg(s.\"Notary\"))) as \"Notary\",round(hll_cardinality(hll_union_agg(s.\"Confidential Containers\"))) as \"Confidential Containers\",round(hll_cardinality(hll_union_agg(s.\"CloudEvents\"))) as \"CloudEvents\",round(hll_cardinality(hll_union_agg(s.\"Volcano\"))) as \"Volcano\",round(hll_cardinality(hll_union_agg(s.\"Kubescape\"))) as \"Kubescape\",round(hll_cardinality(hll_union_agg(s.\"Tremor\"))) as \"Tremor\",round(hll_cardinality(hll_union_agg(s.\"Spiderpool\"))) as \"Spiderpool\",round(hll_cardinality(hll_union_agg(s.\"Inspektor Gadget\"))) as \"Inspektor Gadget\",round(hll_cardinality(hll_union_agg(s.\"WasmEdge Runtime\"))) as \"WasmEdge Runtime\",round(hll_cardinality(hll_union_agg(s.\"External Secrets Operator\"))) as \"External Secrets Operator\",round(hll_cardinality(hll_union_agg(s.\"Distribution\"))) as \"Distribution\",round(hll_cardinality(hll_union_agg(s.\"Devfile\"))) as \"Devfile\",round(hll_cardinality(hll_union_agg(s.\"Open Service Mesh\"))) as \"Open Service Mesh\",round(hll_cardinality(hll_union_agg(s.\"Kuadrant\"))) as \"Kuadrant\",round(hll_cardinality(hll_union_agg(s.\"Emissary-ingress\"))) as \"Emissary-ingress\",round(hll_cardinality(hll_union_agg(s.\"TUF\"))) as \"TUF\",round(hll_cardinality(hll_union_agg(s.\"Curve\"))) as \"Curve\",round(hll_cardinality(hll_union_agg(s.\"ORAS\"))) as \"ORAS\",round(hll_cardinality(hll_union_agg(s.\"Cloud Custodian\"))) as \"Cloud Custodian\",round(hll_cardinality(hll_union_agg(s.\"Bank-Vaults\"))) as \"Bank-Vaults\",round(hll_cardinality(hll_union_agg(s.\"MetalLB\"))) as \"MetalLB\",round(hll_cardinality(hll_union_agg(s.\"Tinkerbell\"))) as \"Tinkerbell\",round(hll_cardinality(hll_union_agg(s.\"Telepresence\"))) as \"Telepresence\",round(hll_cardinality(hll_union_agg(s.\"rkt\"))) as \"rkt\",round(hll_cardinality(hll_union_agg(s.\"Kube-OVN\"))) as \"Kube-OVN\",round(hll_cardinality(hll_union_agg(s.\"Kubestellar\"))) as \"Kubestellar\",round(hll_cardinality(hll_union_agg(s.\"Kanister\"))) as \"Kanister\",round(hll_cardinality(hll_union_agg(s.\"Fluid\"))) as \"Fluid\",round(hll_cardinality(hll_union_agg(s.\"Dex\"))) as \"Dex\",round(hll_cardinality(hll_union_agg(s.\"OpenYurt\"))) as \"OpenYurt\",round(hll_cardinality(hll_union_agg(s.\"OpenKruise\"))) as \"OpenKruise\",round(hll_cardinality(hll_union_agg(s.\"CubeFS\"))) as \"CubeFS\",round(hll_cardinality(hll_union_agg(s.\"Lima\"))) as \"Lima\",round(hll_cardinality(hll_union_agg(s.\"SPIFFE\"))) as \"SPIFFE\",round(hll_cardinality(hll_union_agg(s.\"easegress\"))) as \"easegress\",round(hll_cardinality(hll_union_agg(s.\"in-toto\"))) as \"in-toto\",round(hll_cardinality(hll_union_agg(s.\"Brigade\"))) as \"Brigade\",round(hll_cardinality(hll_union_agg(s.\"Connect\"))) as \"Connect\",round(hll_cardinality(hll_union_agg(s.\"Armada\"))) as \"Armada\",round(hll_cardinality(hll_union_agg(s.\"Porter\"))) as \"Porter\",round(hll_cardinality(hll_union_agg(s.\"Radius\"))) as \"Radius\",round(hll_cardinality(hll_union_agg(s.\"KubeArmor\"))) as \"KubeArmor\",round(hll_cardinality(hll_union_agg(s.\"Shipwright\"))) as \"Shipwright\",round(hll_cardinality(hll_union_agg(s.\"Koordinator\"))) as \"Koordinator\",round(hll_cardinality(hll_union_agg(s.\"Pixie\"))) as \"Pixie\",round(hll_cardinality(hll_union_agg(s.\"Kudo\"))) as \"Kudo\",round(hll_cardinality(hll_union_agg(s.\"CNI\"))) as \"CNI\",round(hll_cardinality(hll_union_agg(s.\"Kepler\"))) as \"Kepler\",round(hll_cardinality(hll_union_agg(s.\"Keylime\"))) as \"Keylime\",round(hll_cardinality(hll_union_agg(s.\"Perses\"))) as \"Perses\",round(hll_cardinality(hll_union_agg(s.\"SOPS\"))) as \"SOPS\",round(hll_cardinality(hll_union_agg(s.\"Athenz\"))) as \"Athenz\",round(hll_cardinality(hll_union_agg(s.\"Headlamp\"))) as \"Headlamp\",round(hll_cardinality(hll_union_agg(s.\"zot\"))) as \"zot\",round(hll_cardinality(hll_union_agg(s.\"Artifact Hub\"))) as \"Artifact Hub\",round(hll_cardinality(hll_union_agg(s.\"K8sGPT\"))) as \"K8sGPT\",round(hll_cardinality(hll_union_agg(s.\"PARSEC\"))) as \"PARSEC\",round(hll_cardinality(hll_union_agg(s.\"SlimToolkit\"))) as \"SlimToolkit\",round(hll_cardinality(hll_union_agg(s.\"KCL\"))) as \"KCL\",round(hll_cardinality(hll_union_agg(s.\"ContainerSSH\"))) as \"ContainerSSH\",round(hll_cardinality(hll_union_agg(s.\"kube-rs\"))) as \"kube-rs\",round(hll_cardinality(hll_union_agg(s.\"Virtual Kubelet\"))) as \"Virtual Kubelet\",round(hll_cardinality(hll_union_agg(s.\"K8GB\"))) as \"K8GB\",round(hll_cardinality(hll_union_agg(s.\"Serverless Workflow\"))) as \"Serverless Workflow\",round(hll_cardinality(hll_union_agg(s.\"DevSpace\"))) as \"DevSpace\",round(hll_cardinality(hll_union_agg(s.\"Nocalhost\"))) as \"Nocalhost\",round(hll_cardinality(hll_union_agg(s.\"Logging Operator\"))) as \"Logging Operator\",round(hll_cardinality(hll_union_agg(s.\"CNCF TOC\"))) as \"CNCF TOC\",round(hll_cardinality(hll_union_agg(s.\"ChaosBlade\"))) as \"ChaosBlade\",round(hll_cardinality(hll_union_agg(s.\"K8up\"))) as \"K8up\",round(hll_cardinality(hll_union_agg(s.\"ko\"))) as \"ko\",round(hll_cardinality(hll_union_agg(s.\"Microcks\"))) as \"Microcks\",round(hll_cardinality(hll_union_agg(s.\"DevStream\"))) as \"DevStream\",round(hll_cardinality(hll_union_agg(s.\"OpenCost\"))) as \"OpenCost\",round(hll_cardinality(hll_union_agg(s.\"Score\"))) as \"Score\",round(hll_cardinality(hll_union_agg(s.\"sealer\"))) as \"sealer\",round(hll_cardinality(hll_union_agg(s.\"Cartography\"))) as \"Cartography\",round(hll_cardinality(hll_union_agg(s.\"Xline\"))) as \"Xline\",round(hll_cardinality(hll_union_agg(s.\"Ratify\"))) as \"Ratify\",round(hll_cardinality(hll_union_agg(s.\"Kubeslice\"))) as \"Kubeslice\",round(hll_cardinality(hll_union_agg(s.\"TrestleGRC\"))) as \"TrestleGRC\",round(hll_cardinality(hll_union_agg(s.\"OpenFunction\"))) as \"OpenFunction\",round(hll_cardinality(hll_union_agg(s.\"Vineyard\"))) as \"Vineyard\",round(hll_cardinality(hll_union_agg(s.\"Curiefense\"))) as \"Curiefense\",round(hll_cardinality(hll_union_agg(s.\"BFE\"))) as \"BFE\",round(hll_cardinality(hll_union_agg(s.\"Capsule\"))) as \"Capsule\",round(hll_cardinality(hll_union_agg(s.\"bpfman\"))) as \"bpfman\",round(hll_cardinality(hll_union_agg(s.\"Serverless Devs\"))) as \"Serverless Devs\",round(hll_cardinality(hll_union_agg(s.\"Inclavare Containers\"))) as \"Inclavare Containers\",round(hll_cardinality(hll_union_agg(s.\"OpenGitOps\"))) as \"OpenGitOps\",round(hll_cardinality(hll_union_agg(s.\"Kuberhealthy\"))) as \"Kuberhealthy\",round(hll_cardinality(hll_union_agg(s.\"Kured\"))) as \"Kured\",round(hll_cardinality(hll_union_agg(s.\"Hwameistor\"))) as \"Hwameistor\",round(hll_cardinality(hll_union_agg(s.\"Piraeus-Datastore\"))) as \"Piraeus-Datastore\",round(hll_cardinality(hll_union_agg(s.\"Kubeclipper\"))) as \"Kubeclipper\",round(hll_cardinality(hll_union_agg(s.\"openGemini\"))) as \"openGemini\",round(hll_cardinality(hll_union_agg(s.\"Akri\"))) as \"Akri\",round(hll_cardinality(hll_union_agg(s.\"Kubean\"))) as \"Kubean\",round(hll_cardinality(hll_union_agg(s.\"Krustlet\"))) as \"Krustlet\",round(hll_cardinality(hll_union_agg(s.\"VS Code Kubernetes Tools\"))) as \"VS Code Kubernetes Tools\",round(hll_cardinality(hll_union_agg(s.\"kube-vip\"))) as \"kube-vip\",round(hll_cardinality(hll_union_agg(s.\"Eraser\"))) as \"Eraser\",round(hll_cardinality(hll_union_agg(s.\"SchemaHero\"))) as \"SchemaHero\",round(hll_cardinality(hll_union_agg(s.\"Paralus\"))) as \"Paralus\",round(hll_cardinality(hll_union_agg(s.\"LoxiLB\"))) as \"LoxiLB\",round(hll_cardinality(hll_union_agg(s.\"KrknChaos\"))) as \"KrknChaos\",round(hll_cardinality(hll_union_agg(s.\"Clusternet\"))) as \"Clusternet\",round(hll_cardinality(hll_union_agg(s.\"Copacetic\"))) as \"Copacetic\",round(hll_cardinality(hll_union_agg(s.\"Clusterpedia\"))) as \"Clusterpedia\",round(hll_cardinality(hll_union_agg(s.\"kube-burner\"))) as \"kube-burner\",round(hll_cardinality(hll_union_agg(s.\"Trickster\"))) as \"Trickster\",round(hll_cardinality(hll_union_agg(s.\"Service Mesh Performance\"))) as \"Service Mesh Performance\",round(hll_cardinality(hll_union_agg(s.\"Stacker\"))) as \"Stacker\",round(hll_cardinality(hll_union_agg(s.\"Foniod\"))) as \"Foniod\",round(hll_cardinality(hll_union_agg(s.\"Aeraki Mesh\"))) as \"Aeraki Mesh\",round(hll_cardinality(hll_union_agg(s.\"SMI\"))) as \"SMI\",round(hll_cardinality(hll_union_agg(s.\"Teller\"))) as \"Teller\",round(hll_cardinality(hll_union_agg(s.\"SuperEdge\"))) as \"SuperEdge\",round(hll_cardinality(hll_union_agg(s.\"OpenELB\"))) as \"OpenELB\",round(hll_cardinality(hll_union_agg(s.\"Merbridge\"))) as \"Merbridge\",round(hll_cardinality(hll_union_agg(s.\"Skooner\"))) as \"Skooner\",round(hll_cardinality(hll_union_agg(s.\"KubeDL\"))) as \"KubeDL\",round(hll_cardinality(hll_union_agg(s.\"HAMi\"))) as \"HAMi\",round(hll_cardinality(hll_union_agg(s.\"keycloak\"))) as \"keycloak\",round(hll_cardinality(hll_union_agg(s.\"FabEdge\"))) as \"FabEdge\",round(hll_cardinality(hll_union_agg(s.\"Kuasar\"))) as \"Kuasar\",round(hll_cardinality(hll_union_agg(s.\"Hexa Policy Orchestrator\"))) as \"Hexa Policy Orchestrator\",round(hll_cardinality(hll_union_agg(s.\"OPCR\"))) as \"OPCR\",round(hll_cardinality(hll_union_agg(s.\"Carina\"))) as \"Carina\",round(hll_cardinality(hll_union_agg(s.\"CNI-Genie\"))) as \"CNI-Genie\",round(hll_cardinality(hll_union_agg(s.\"Krator\"))) as \"Krator\"",
          "value": "round(hll_cardinality(hll_union_agg(s.\"Kubernetes\"))) as \"Kubernetes\",round(hll_cardinality(hll_union_agg(s.\"Istio\"))) as \"Istio\",round(hll_cardinality(hll_union_agg(s.\"OpenTelemetry\"))) as \"OpenTelemetry\",round(hll_cardinality(hll_union_agg(s.\"Knative\"))) as \"Knative\",round(hll_cardinality(hll_union_agg(s.\"KubeVirt\"))) as \"KubeVirt\",round(hll_cardinality(hll_union_agg(s.\"gRPC\"))) as \"gRPC\",round(hll_cardinality(hll_union_agg(s.\"Envoy\"))) as \"Envoy\",round(hll_cardinality(hll_union_agg(s.\"Helm\"))) as \"Helm\",round(hll_cardinality(hll_union_agg(s.\"Cilium\"))) as \"Cilium\",round(hll_cardinality(hll_union_agg(s.\"Argo\"))) as \"Argo\",round(hll_cardinality(hll_union_agg(s.\"Prometheus\"))) as \"Prometheus\",round(hll_cardinality(hll_union_agg(s.\"TiKV\"))) as \"TiKV\",round(hll_cardinality(hll_union_agg(s.\"Kubeflow\"))) as \"Kubeflow\",round(hll_cardinality(hll_union_agg(s.\"Backstage\"))) as \"Backstage\",round(hll_cardinality(hll_union_agg(s.\"Operator Framework\"))) as \"Operator Framework\",round(hll_cardinality(hll_union_agg(s.\"CNCF\"))) as \"CNCF\",round(hll_cardinality(hll_union_agg(s.\"Keycloak\"))) as \"Keycloak\",round(hll_cardinality(hll_union_agg(s.\"CRI-O\"))) as \"CRI-O\",round(hll_cardinality(hll_union_agg(s.\"Network Service Mesh\"))) as \"Network Service Mesh\",round(hll_cardinality(hll_union_agg(s.\"NATS\"))) as \"NATS\",round(hll_cardinality(hll_union_agg(s.\"containerd\"))) as \"containerd\",round(hll_cardinality(hll_union_agg(s.\"Dapr\"))) as \"Dapr\",round(hll_cardinality(hll_union_agg(s.\"etcd\"))) as \"etcd\",round(hll_cardinality(hll_union_agg(s.\"Linkerd\"))) as \"Linkerd\",round(hll_cardinality(hll_union_agg(s.\"OpenEBS\"))) as \"OpenEBS\",round(hll_cardinality(hll_union_agg(s.\"Harbor\"))) as \"Harbor\",round(hll_cardinality(hll_union_agg(s.\"Fluentd\"))) as \"Fluentd\",round(hll_cardinality(hll_union_agg(s.\"Vitess\"))) as \"Vitess\",round(hll_cardinality(hll_union_agg(s.\"Cloud Deployment Kit for Kubernetes\"))) as \"Cloud Deployment Kit for Kubernetes\",round(hll_cardinality(hll_union_agg(s.\"Falco\"))) as \"Falco\",round(hll_cardinality(hll_union_agg(s.\"Keptn\"))) as \"Keptn\",round(hll_cardinality(hll_union_agg(s.\"Rook\"))) as \"Rook\",round(hll_cardinality(hll_union_agg(s.\"Meshery\"))) as \"Meshery\",round(hll_cardinality(hll_union_agg(s.\"Longhorn\"))) as \"Longhorn\",round(hll_cardinality(hll_union_agg(s.\"Flux\"))) as \"Flux\",round(hll_cardinality(hll_union_agg(s.\"Jaeger\"))) as \"Jaeger\",round(hll_cardinality(hll_union_agg(s.\"Strimzi\"))) as \"Strimzi\",round(hll_cardinality(hll_union_agg(s.\"Submariner\"))) as \"Submariner\",round(hll_cardinality(hll_union_agg(s.\"Antrea\"))) as \"Antrea\",round(hll_cardinality(hll_union_agg(s.\"cert-manager\"))) as \"cert-manager\",round(hll_cardinality(hll_union_agg(s.\"Kyverno\"))) as \"Kyverno\",round(hll_cardinality(hll_union_agg(s.\"Metal³\"))) as \"Metal³\",round(hll_cardinality(hll_union_agg(s.\"Buildpacks\"))) as \"Buildpacks\",round(hll_cardinality(hll_union_agg(s.\"OpenFeature\"))) as \"OpenFeature\",round(hll_cardinality(hll_union_agg(s.\"OPA\"))) as \"OPA\",round(hll_cardinality(hll_union_agg(s.\"Kuma\"))) as \"Kuma\",round(hll_cardinality(hll_union_agg(s.\"Crossplane\"))) as \"Crossplane\",round(hll_cardinality(hll_union_agg(s.\"Konveyor\"))) as \"Konveyor\",round(hll_cardinality(hll_union_agg(s.\"K3s\"))) as \"K3s\",round(hll_cardinality(hll_union_agg(s.\"KubeEdge\"))) as \"KubeEdge\",round(hll_cardinality(hll_union_agg(s.\"Atlantis\"))) as \"Atlantis\",round(hll_cardinality(hll_union_agg(s.\"Thanos\"))) as \"Thanos\",round(hll_cardinality(hll_union_agg(s.\"Dragonfly\"))) as \"Dragonfly\",round(hll_cardinality(hll_union_agg(s.\"Karmada\"))) as \"Karmada\",round(hll_cardinality(hll_union_agg(s.\"KEDA\"))) as \"KEDA\",round(hll_cardinality(hll_union_agg(s.\"CoreDNS\"))) as \"CoreDNS\",round(hll_cardinality(hll_union_agg(s.\"LitmusChaos\"))) as \"LitmusChaos\",round(hll_cardinality(hll_union_agg(s.\"Pravega\"))) as \"Pravega\",round(hll_cardinality(hll_union_agg(s.\"GraphQL\"))) as \"GraphQL\",round(hll_cardinality(hll_union_agg(s.\"Flatcar\"))) as \"Flatcar\",round(hll_cardinality(hll_union_agg(s.\"KubeVela\"))) as \"KubeVela\",round(hll_cardinality(hll_union_agg(s.\"Chaos Mesh\"))) as \"Chaos Mesh\",round(hll_cardinality(hll_union_agg(s.\"Cortex\"))) as \"Cortex\",round(hll_cardinality(hll_union_agg(s.\"Kairos\"))) as \"Kairos\",round(hll_cardinality(hll_union_agg(s.\"Contour\"))) as \"Contour\",round(hll_cardinality(hll_union_agg(s.\"wasmCloud\"))) as \"wasmCloud\",round(hll_cardinality(hll_union_agg(s.\"kubewarden\"))) as \"kubewarden\",round(hll_cardinality(hll_union_agg(s.\"PipeCD\"))) as \"PipeCD\",round(hll_cardinality(hll_union_agg(s.\"kpt\"))) as \"kpt\",round(hll_cardinality(hll_union_agg(s.\"OpenFGA\"))) as \"OpenFGA\",round(hll_cardinality(hll_union_agg(s.\"Open Cluster Management\"))) as \"Open Cluster Management\",round(hll_cardinality(hll_union_agg(s.\"kcp\"))) as \"kcp\",round(hll_cardinality(hll_union_agg(s.\"Carvel\"))) as \"Carvel\",round(hll_cardinality(hll_union_agg(s.\"werf\"))) as \"werf\",round(hll_cardinality(hll_union_agg(s.\"SPIRE\"))) as \"SPIRE\",round(hll_cardinality(hll_union_agg(s.\"Notary\"))) as \"Notary\",round(hll_cardinality(hll_union_agg(s.\"Confidential Containers\"))) as \"Confidential Containers\",round(hll_cardinality(hll_union_agg(s.\"CloudEvents\"))) as \"CloudEvents\",round(hll_cardinality(hll_union_agg(s.\"Volcano\"))) as \"Volcano\",round(hll_cardinality(hll_union_agg(s.\"Kubescape\"))) as \"Kubescape\",round(hll_cardinality(hll_union_agg(s.\"Tremor\"))) as \"Tremor\",round(hll_cardinality(hll_union_agg(s.\"Spiderpool\"))) as \"Spiderpool\",round(hll_cardinality(hll_union_agg(s.\"Inspektor Gadget\"))) as \"Inspektor Gadget\",round(hll_cardinality(hll_union_agg(s.\"WasmEdge Runtime\"))) as \"WasmEdge Runtime\",round(hll_cardinality(hll_union_agg(s.\"External Secrets Operator\"))) as \"External Secrets Operator\",round(hll_cardinality(hll_union_agg(s.\"Distribution\"))) as \"Distribution\",round(hll_cardinality(hll_union_agg(s.\"Devfile\"))) as \"Devfile\",round(hll_cardinality(hll_union_agg(s.\"Open Service Mesh\"))) as \"Open Service Mesh\",round(hll_cardinality(hll_union_agg(s.\"Kuadrant\"))) as \"Kuadrant\",round(hll_cardinality(hll_union_agg(s.\"Emissary-ingress\"))) as \"Emissary-ingress\",round(hll_cardinality(hll_union_agg(s.\"TUF\"))) as \"TUF\",round(hll_cardinality(hll_union_agg(s.\"Curve\"))) as \"Curve\",round(hll_cardinality(hll_union_agg(s.\"ORAS\"))) as \"ORAS\",round(hll_cardinality(hll_union_agg(s.\"Cloud Custodian\"))) as \"Cloud Custodian\",round(hll_cardinality(hll_union_agg(s.\"Bank-Vaults\"))) as \"Bank-Vaults\",round(hll_cardinality(hll_union_agg(s.\"MetalLB\"))) as \"MetalLB\",round(hll_cardinality(hll_union_agg(s.\"Tinkerbell\"))) as \"Tinkerbell\",round(hll_cardinality(hll_union_agg(s.\"Telepresence\"))) as \"Telepresence\",round(hll_cardinality(hll_union_agg(s.\"rkt\"))) as \"rkt\",round(hll_cardinality(hll_union_agg(s.\"Kube-OVN\"))) as \"Kube-OVN\",round(hll_cardinality(hll_union_agg(s.\"Kubestellar\"))) as \"Kubestellar\",round(hll_cardinality(hll_union_agg(s.\"Kanister\"))) as \"Kanister\",round(hll_cardinality(hll_union_agg(s.\"Fluid\"))) as \"Fluid\",round(hll_cardinality(hll_union_agg(s.\"Dex\"))) as \"Dex\",round(hll_cardinality(hll_union_agg(s.\"OpenYurt\"))) as \"OpenYurt\",round(hll_cardinality(hll_union_agg(s.\"OpenKruise\"))) as \"OpenKruise\",round(hll_cardinality(hll_union_agg(s.\"CubeFS\"))) as \"CubeFS\",round(hll_cardinality(hll_union_agg(s.\"Lima\"))) as \"Lima\",round(hll_cardinality(hll_union_agg(s.\"SPIFFE\"))) as \"SPIFFE\",round(hll_cardinality(hll_union_agg(s.\"easegress\"))) as \"easegress\",round(hll_cardinality(hll_union_agg(s.\"in-toto\"))) as \"in-toto\",round(hll_cardinality(hll_union_agg(s.\"Brigade\"))) as \"Brigade\",round(hll_cardinality(hll_union_agg(s.\"Connect\"))) as \"Connect\",round(hll_cardinality(hll_union_agg(s.\"Armada\"))) as \"Armada\",round(hll_cardinality(hll_union_agg(s.\"Porter\"))) as \"Porter\",round(hll_cardinality(hll_union_agg(s.\"Radius\"))) as \"Radius\",round(hll_cardinality(hll_union_agg(s.\"KubeArmor\"))) as \"KubeArmor\",round(hll_cardinality(hll_union_agg(s.\"Shipwright\"))) as \"Shipwright\",round(hll_cardinality(hll_union_agg(s.\"Koordinator\"))) as \"Koordinator\",round(hll_cardinality(hll_union_agg(s.\"Pixie\"))) as \"Pixie\",round(hll_cardinality(hll_union_agg(s.\"Kudo\"))) as \"Kudo\",round(hll_cardinality(hll_union_agg(s.\"CNI\"))) as \"CNI\",round(hll_cardinality(hll_union_agg(s.\"Kepler\"))) as \"Kepler\",round(hll_cardinality(hll_union_agg(s.\"Keylime\"))) as \"Keylime\",round(hll_cardinality(hll_union_agg(s.\"Perses\"))) as \"Perses\",round(hll_cardinality(hll_union_agg(s.\"SOPS\"))) as \"SOPS\",round(hll_cardinality(hll_union_agg(s.\"Athenz\"))) as \"Athenz\",round(hll_cardinality(hll_union_agg(s.\"Headlamp\"))) as \"Headlamp\",round(hll_cardinality(hll_union_agg(s.\"zot\"))) as \"zot\",round(hll_cardinality(hll_union_agg(s.\"Artifact Hub\"))) as \"Artifact Hub\",round(hll_cardinality(hll_union_agg(s.\"K8sGPT\"))) as \"K8sGPT\",round(hll_cardinality(hll_union_agg(s.\"PARSEC\"))) as \"PARSEC\",round(hll_cardinality(hll_union_agg(s.\"SlimToolkit\"))) as \"SlimToolkit\",round(hll_cardinality(hll_union_agg(s.\"KCL\"))) as \"KCL\",round(hll_cardinality(hll_union_agg(s.\"ContainerSSH\"))) as \"ContainerSSH\",round(hll_cardinality(hll_union_agg(s.\"kube-rs\"))) as \"kube-rs\",round(hll_cardinality(hll_union_agg(s.\"Virtual Kubelet\"))) as \"Virtual Kubelet\",round(hll_cardinality(hll_union_agg(s.\"K8GB\"))) as \"K8GB\",round(hll_cardinality(hll_union_agg(s.\"Serverless Workflow\"))) as \"Serverless Workflow\",round(hll_cardinality(hll_union_agg(s.\"DevSpace\"))) as \"DevSpace\",round(hll_cardinality(hll_union_agg(s.\"Nocalhost\"))) as \"Nocalhost\",round(hll_cardinality(hll_union_agg(s.\"Logging Operator\"))) as \"Logging Operator\",round(hll_cardinality(hll_union_agg(s.\"CNCF TOC\"))) as \"CNCF TOC\",round(hll_cardinality(hll_union_agg(s.\"ChaosBlade\"))) as \"ChaosBlade\",round(hll_cardinality(hll_union_agg(s.\"K8up\"))) as \"K8up\",round(hll_cardinality(hll_union_agg(s.\"ko\"))) as \"ko\",round(hll_cardinality(hll_union_agg(s.\"Microcks\"))) as \"Microcks\",round(hll_cardinality(hll_union_agg(s.\"DevStream\"))) as \"DevStream\",round(hll_cardinality(hll_union_agg(s.\"OpenCost\"))) as \"OpenCost\",round(hll_cardinality(hll_union_agg(s.\"Score\"))) as \"Score\",round(hll_cardinality(hll_union_agg(s.\"sealer\"))) as \"sealer\",round(hll_cardinality(hll_union_agg(s.\"Cartography\"))) as \"Cartography\",round(hll_cardinality(hll_union_agg(s.\"Xline\"))) as \"Xline\",round(hll_cardinality(hll_union_agg(s.\"Ratify\"))) as \"Ratify\",round(hll_cardinality(hll_union_agg(s.\"Kubeslice\"))) as \"Kubeslice\",round(hll_cardinality(hll_union_agg(s.\"TrestleGRC\"))) as \"TrestleGRC\",round(hll_cardinality(hll_union_agg(s.\"OpenFunction\"))) as \"OpenFunction\",round(hll_cardinality(hll_union_agg(s.\"Vineyard\"))) as \"Vineyard\",round(hll_cardinality(hll_union_agg(s.\"Curiefense\"))) as \"Curiefense\",round(hll_cardinality(hll_union_agg(s.\"BFE\"))) as \"BFE\",round(hll_cardinality(hll_union_agg(s.\"Capsule\"))) as \"Capsule\",round(hll_cardinality(hll_union_agg(s.\"bpfman\"))) as \"bpfman\",round(hll_cardinality(hll_union_agg(s.\"Serverless Devs\"))) as \"Serverless Devs\",round(hll_cardinality(hll_union_agg(s.\"Inclavare Containers\"))) as \"Inclavare Containers\",round(hll_cardinality(hll_union_agg(s.\"OpenGitOps\"))) as \"OpenGitOps\",round(hll_cardinality(hll_union_agg(s.\"Kuberhealthy\"))) as \"Kuberhealthy\",round(hll_cardinality(hll_union_agg(s.\"Kured\"))) as \"Kured\",round(hll_cardinality(hll_union_agg(s.\"Hwameistor\"))) as \"Hwameistor\",round(hll_cardinality(hll_union_agg(s.\"Piraeus-Datastore\"))) as \"Piraeus-Datastore\",round(hll_cardinality(hll_union_agg(s.\"Kubeclipper\"))) as \"Kubeclipper\",round(hll_cardinality(hll_union_agg(s.\"openGemini\"))) as \"openGemini\",round(hll_cardinality(hll_union_agg(s.\"Akri\"))) as \"Akri\",round(hll_cardinality(hll_union_agg(s.\"Kubean\"))) as \"Kubean\",round(hll_cardinality(hll_union_agg(s.\"Krustlet\"))) as \"Krustlet\",round(hll_cardinality(hll_union_agg(s.\"VS Code Kubernetes Tools\"))) as \"VS Code Kubernetes Tools\",round(hll_cardinality(hll_union_agg(s.\"kube-vip\"))) as \"kube-vip\",round(hll_cardinality(hll_union_agg(s.\"Eraser\"))) as \"Eraser\",round(hll_cardinality(hll_union_agg(s.\"SchemaHero\"))) as \"SchemaHero\",round(hll_cardinality(hll_union_agg(s.\"Paralus\"))) as \"Paralus\",round(hll_cardinality(hll_union_agg(s.\"LoxiLB\"))) as \"LoxiLB\",round(hll_cardinality(hll_union_agg(s.\"KrknChaos\"))) as \"KrknChaos\",round(hll_cardinality(hll_union_agg(s.\"Clusternet\"))) as \"Clusternet\",round(hll_cardinality(hll_union_agg(s.\"Copacetic\"))) as \"Copacetic\",round(hll_cardinality(hll_union_agg(s.\"Clusterpedia\"))) as \"Clusterpedia\",round(hll_cardinality(hll_union_agg(s.\"kube-burner\"))) as \"kube-burner\",round(hll_cardinality(hll_union_agg(s.\"Trickster\"))) as \"Trickster\",round(hll_cardinality(hll_union_agg(s.\"Service Mesh Performance\"))) as \"Service Mesh Performance\",round(hll_cardinality(hll_union_agg(s.\"Stacker\"))) as \"Stacker\",round(hll_cardinality(hll_union_agg(s.\"Foniod\"))) as \"Foniod\",round(hll_cardinality(hll_union_agg(s.\"Aeraki Mesh\"))) as \"Aeraki Mesh\",round(hll_cardinality(hll_union_agg(s.\"SMI\"))) as \"SMI\",round(hll_cardinality(hll_union_agg(s.\"Teller\"))) as \"Teller\",round(hll_cardinality(hll_union_agg(s.\"SuperEdge\"))) as \"SuperEdge\",round(hll_cardinality(hll_union_agg(s.\"OpenELB\"))) as \"OpenELB\",round(hll_cardinality(hll_union_agg(s.\"Merbridge\"))) as \"Merbridge\",round(hll_cardinality(hll_union_agg(s.\"Skooner\"))) as \"Skooner\",round(hll_cardinality(hll_union_agg(s.\"KubeDL\"))) as \"KubeDL\",round(hll_cardinality(hll_union_agg(s.\"HAMi\"))) as \"HAMi\",round(hll_cardinality(hll_union_agg(s.\"keycloak\"))) as \"keycloak\",round(hll_cardinality(hll_union_agg(s.\"FabEdge\"))) as \"FabEdge\",round(hll_cardinality(hll_union_agg(s.\"Kuasar\"))) as \"Kuasar\",round(hll_cardinality(hll_union_agg(s.\"Hexa Policy Orchestrator\"))) as \"Hexa Policy Orchestrator\",round(hll_cardinality(hll_union_agg(s.\"OPCR\"))) as \"OPCR\",round(hll_cardinality(hll_union_agg(s.\"Carina\"))) as \"Carina\",round(hll_cardinality(hll_union_agg(s.\"CNI-Genie\"))) as \"CNI-Genie\",round(hll_cardinality(hll_union_agg(s.\"Krator\"))) as \"Krator\""
        },
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "definition": "with projects as (\n  select unnest(string_to_array('${projects:csv}', ',')) as project\n)\nselect string_agg('round(hll_cardinality(hll_union_agg(s.\"' || project || '\"))) as \"' || project || '\"', ',') from projects",
        "hide": 2,
        "includeAll": false,
        "label": "Projects",
        "multi": false,
        "name": "columns",
        "options": [],
        "query": "with projects as (\n  select unnest(string_to_array('${projects:csv}', ',')) as project\n)\nselect string_agg('round(hll_cardinality(hll_union_agg(s.\"' || project || '\"))) as \"' || project || '\"', ',') from projects",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "postgres",
          "uid": "P172949F98CB31475"
        },
        "definition": "",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "docs",
        "options": [],
        "query": "select value_s from gha_vars where name = 'project_countries_stats_docs_html'",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": true,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-10y",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Project Country Statistics",
  "uid": "85",
  "version": 2,
  "weekStart": ""
}
